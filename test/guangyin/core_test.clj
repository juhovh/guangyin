(ns guangyin.core-test
  (:require [clojure.test :refer :all]
            [guangyin.core :refer :all]
            [guangyin.format :refer :all]))

(deftest test-instant
  (is (instant? @(instant :now)))
  (is (instant? @(instant (clock))))
  (is (instant? @(instant "2015-01-01T12:15:00.123Z")))
  (is (instant? @(instant :epoch)))
  (is (instant? @(instant (offset-date-time :now))))
  (is (= @(instant :epoch) (instant "1970-01-01T00:00:00Z")))
  (is (= (:instant-seconds (instant "2015-01-01T12:15:00.123Z")) 1420114500)))

(deftest test-period
  (is (period? @(period "P2Y")))
  (is (period? @(period "P1Y2M3W4D")))
  (is (period? @(period "P-1Y2M")))
  (is (period? @(period "-P1Y2M")))
  (is (period? @(period :zero)))
  (is (period? @(period (period :zero))))
  (is (= (period (local-date "2015-01-01") (local-date "2017-04-12")) (period "P2Y3M11D")))
  (is (period? @(years 2)))
  (is (period? @(weeks 2)))
  (is (period? @(months 2)))
  (is (period? @(days 2)))
  (is (= (:years (period "P2Y3M4W5D")) 2))
  (is (= (:months (period "P2Y3M4W5D")) 3))
  (is (= (:days (period "P2Y3M1W")) 7))
  (is (= (:days (period "P2Y3M1W1D")) 8)))

(deftest test-duration
  (is (duration? @(duration :zero)))
  (is (duration? @(duration "PT15M")))
  (is (duration? @(duration "PT-6H3M")))
  (is (duration? @(duration "-PT6H3M")))
  (is (duration? @(duration (instant :epoch) (instant :now))))
  (is (duration? @(duration (local-time :midnight) (local-time :noon))))
  (is (duration? @(hours 2)))
  (is (duration? @(minutes 2)))
  (is (duration? @(seconds 2)))
  (is (duration? @(millis 2)))
  (is (duration? @(nanos 2)))
  (is (= (:hours (duration "PT2H3M4S")) 2))
  (is (= (:minutes (duration "PT2H3M4S")) 123))
  (is (= (:seconds (duration "PT2H3M4S")) 7384)))

(deftest test-local-date
  (is (local-date? @(local-date :now)))
  (is (local-date? @(local-date (clock))))
  (is (local-date? @(local-date (zone-id "Asia/Shanghai"))))
  (is (local-date? @(local-date "2015-04-01")))
  (is (local-date? @(local-date :max)))
  (is (local-date? @(local-date (offset-date-time :now))))
  (is (local-date? @(local-date "01.04.2015" (date-time-formatter "dd.MM.yyyy"))))
  (is (local-date? @(local-date 2015 4 1)))
  (is (= (:year (local-date 2015 4 1)) 2015))
  (is (= (:month-of-year (local-date 2014 4 1)) 4))
  (is (= (:day-of-month (local-date 2014 4 1)) 1)))

(deftest test-local-time
  (is (local-time? @(local-time :now)))
  (is (local-time? @(local-time (clock))))
  (is (local-time? @(local-time (zone-id "Asia/Shanghai"))))
  (is (local-time? @(local-time "12:15")))
  (is (local-time? @(local-time "12:15:00.123")))
  (is (local-time? @(local-time :noon)))
  (is (local-time? @(local-time (local-date-time :now))))
  (is (local-time? @(local-time "12.15" (date-time-formatter "HH.mm"))))
  (is (local-time? @(local-time 12 15)))
  (is (local-time? @(local-time 12 15 0)))
  (is (local-time? @(local-time 12 15 0 123000000)))
  (is (= (:hour-of-day (local-time "12:15:05.123")) 12))
  (is (= (:minute-of-hour (local-time "12:15:05.123")) 15))
  (is (= (:second-of-minute (local-time "12:15:05.123")) 5))
  (is (= (:micro-of-second (local-time "12:15:05.123")) 123000)))

(deftest test-offset-time
  (is (offset-time? @(offset-time :now)))
  (is (offset-time? @(offset-time (clock))))
  (is (offset-time? @(offset-time (zone-id "Asia/Shanghai"))))
  (is (offset-time? @(offset-time "12:15:00.123+03:00")))
  (is (offset-time? @(offset-time :max)))
  (is (offset-time? @(offset-time (offset-date-time :now))))
  (is (offset-time? @(offset-time (local-time 12 15) (zone-offset (hours 3)))))
  (is (offset-time? @(offset-time (instant :now) (zone-id "Europe/Helsinki"))))
  (is (offset-time? @(offset-time "12.15+0300" (date-time-formatter "HH.mmx"))))
  (is (offset-time? @(offset-time 12 15 0 123000000 (zone-offset (hours 3)))))
  (is (= (:hour-of-day (offset-time "12:15:05.123+03:00")) 12))
  (is (= (:minute-of-hour (offset-time "12:15:05.123+03:00")) 15))
  (is (= (:second-of-minute (offset-time "12:15:05.123+03:00")) 5))
  (is (= (:micro-of-second (offset-time "12:15:05.123+03:00")) 123000))
  (is (= (:offset-seconds (offset-time "12:15:05.123+03:00")) 10800)))

(deftest test-local-date-time
  (is (local-date-time? @(local-date-time :now)))
  (is (local-date-time? @(local-date-time (clock))))
  (is (local-date-time? @(local-date-time (zone-id "Asia/Shanghai"))))
  (is (local-date-time? @(local-date-time "2015-04-16T12:15:00.123")))
  (is (local-date-time? @(local-date-time "16.04.2015 12.15" (date-time-formatter "dd.MM.yyyy HH.mm"))))
  (is (local-date-time? @(local-date-time :max)))
  (is (local-date-time? @(local-date-time (offset-date-time :now))))
  (is (local-date-time? @(local-date-time (instant :now) (zone-id "Asia/Shanghai"))))
  (is (local-date-time? @(local-date-time (local-date :now) (local-time :now))))
  (is (local-date-time? @(local-date-time 2015 4 16 12 15)))
  (is (local-date-time? @(local-date-time 2015 4 16 12 15 0)))
  (is (local-date-time? @(local-date-time 2015 4 16 12 15 0 123000000))))

(deftest test-offset-date-time
  (is (offset-date-time? @(offset-date-time :now)))
  (is (offset-date-time? @(offset-date-time (clock))))
  (is (offset-date-time? @(offset-date-time (zone-id "Asia/Shanghai"))))
  (is (offset-date-time? @(offset-date-time "2015-04-16T12:15:00.123+03:00")))
  (is (offset-date-time? @(offset-date-time "16.04.2015 12.15+0300" (date-time-formatter "dd.MM.yyyy HH.mmx"))))
  (is (offset-date-time? @(offset-date-time :max)))
  (is (offset-date-time? @(offset-date-time (zoned-date-time :now))))
  (is (offset-date-time? @(offset-date-time (instant :now) (zone-id "Asia/Shanghai"))))
  (is (offset-date-time? @(offset-date-time (local-date-time :now) (zone-offset (hours 3)))))
  (is (offset-date-time? @(offset-date-time (local-date :now) (local-time :now) (zone-offset (hours 3)))))
  (is (offset-date-time? @(offset-date-time 2015 4 16 12 15 0 123000000 (zone-offset (hours 3))))))

(deftest test-zoned-date-time
  (is (zoned-date-time? @(zoned-date-time :now)))
  (is (zoned-date-time? @(zoned-date-time (clock))))
  (is (zoned-date-time? @(zoned-date-time (zoned-date-time :now))))
  (is (zoned-date-time? @(zoned-date-time (zone-id "Asia/Shanghai"))))
  (is (zoned-date-time? @(zoned-date-time "2015-04-16T12:15:00.123+03:00[Europe/Helsinki]")))
  (is (zoned-date-time? @(zoned-date-time "2015-04-16T12:15:00.123+03:00[Europe/Helsinki]" (date-time-formatter :iso-date-time))))
  (is (zoned-date-time? @(zoned-date-time (instant :now) (zone-id "Europe/Helsinki"))))
  (is (zoned-date-time? @(zoned-date-time (local-date-time :now) (zone-id "Europe/Helsinki"))))
  (is (zoned-date-time? @(zoned-date-time (local-date :now) (local-time :now) (zone-id "Europe/Helsinki"))))
  (is (zoned-date-time? @(zoned-date-time 2015 4 16 12 15 0 123000000 (zone-id "Europe/Helsinki"))))
  (is (thrown? IllegalArgumentException (zoned-date-time :foobar))))

(deftest test-year
  (is (year? @(year :now)))
  (is (year? @(year (clock))))
  (is (year? @(year (zone-id "Asia/Shanghai"))))
  (is (year? @(year "2015")))
  (is (year? @(year "2015" (date-time-formatter "yyyy"))))
  (is (year? @(year :min)))
  (is (year? @(year :max)))
  (is (year? @(year (local-date :now))))
  (is (year? @(year 2015)))
  (is (thrown? IllegalArgumentException (year :foobar))))

(deftest test-year-month
  (is (year-month? @(year-month :now)))
  (is (year-month? @(year-month (clock))))
  (is (year-month? @(year-month (zone-id "Asia/Shanghai"))))
  (is (year-month? @(year-month "2015-04")))
  (is (year-month? @(year-month "04.2015" (date-time-formatter "MM.yyyy"))))
  (is (year-month? @(year-month (local-date :now))))
  (is (year-month? @(year-month 2015 4)))
  (is (thrown? IllegalArgumentException (year-month :foobar))))

(deftest test-month
  (is (month? @(month :now)))
  (is (month? @(month (clock))))
  (is (month? @(month (zone-id "Asia/Shanghai"))))
  (is (month? @(month (local-date :now))))
  (is (month? @(month :january)))
  (is (month? @(month :december))))

(deftest test-month-day
  (is (month-day? @(month-day :now)))
  (is (month-day? @(month-day (clock))))
  (is (month-day? @(month-day (zone-id "Asia/Shanghai"))))
  (is (month-day? @(month-day "--04-16")))
  (is (month-day? @(month-day "16.04." (date-time-formatter "dd.MM."))))
  (is (month-day? @(month-day (local-date :now))))
  (is (month-day? @(month-day (month 4) 16)))
  (is (month-day? @(month-day 4 16)))
  (is (thrown? IllegalArgumentException (month-day :foobar))))

(deftest test-day-of-week
  (is (day-of-week? @(day-of-week :now)))
  (is (day-of-week? @(day-of-week (clock))))
  (is (day-of-week? @(day-of-week (zone-id "Asia/Shanghai"))))
  (is (day-of-week? @(day-of-week (local-date :now))))
  (is (day-of-week? @(day-of-week :monday)))
  (is (day-of-week? @(day-of-week :saturday)))
  (is (day-of-week? @(day-of-week 3)))
  (is (= (day-of-week :wednesday) (day-of-week 3))))

(deftest test-zone-id
  (is (zone-id? @(zone-id :default)))
  (is (zone-id? @(zone-id "America/New_York")))
  (is (zone-id? @(zone-id (zoned-date-time :now))))
  (is (zone-id? @(zone-id "UTC" (zone-offset 8))))
  (is (thrown? IllegalArgumentException (zone-id :foobar))))

(deftest test-zone-offset
  (is (zone-offset? @(zone-offset "+02:00")))
  (is (zone-offset? @(zone-offset :utc)))
  (is (zone-offset? @(zone-offset -10)))
  (is (zone-offset? @(zone-offset 10 30)))
  (is (zone-offset? @(zone-offset (hours -10))))
  (is (zone-offset? @(zone-offset (offset-time :now)))))

(deftest test-clock
  (is (clock? @(clock)))
  (is (clock? @(clock (zone-id "Asia/Shanghai"))))
  (is (clock? @(clock (instant :now) (zone-id "Europe/Helsinki"))))
  (is (clock? @(clock (clock) (hours 2)))))

(deftest test-plus
  (is (= @(period "P1D") @(plus (period "P1D"))))
  (is (= @(period "P3D") @(plus (days 1) (days 2))))
  (is (= @(period "P3M1D") @(plus (months 1) (months 2) (days 1))))
  (is (= @(duration "PT3H") @(plus (hours 1) (hours 2))))
  (is (= @(duration "PT3H1M") @(plus (hours 1) (hours 2) (minutes 1))))
  (is (= @(duration "PT3H") @(plus (hours 1) {:hours 2})))
  (is (= @(duration "PT3H1M") @(plus (hours 1) {:hours 2} (minutes 1))))
  (is (= @(duration "PT3H1M") @(plus (hours 1) {:hours 2} {:minutes 1})))
  (is (= @(duration "PT3H1M") @(plus (hours 1) {:hours 2 :minutes 1}))))

(deftest test-minus
  (is (= @(period "P1D") @(minus (period "P1D"))))
  (is (= @(period "P2D") @(minus (days 3) (days 1))))
  (is (= @(period "P3M") @(minus (period "P3M1D") (days 1))))
  (is (= @(duration "PT1H") @(minus (hours 3) (hours 2))))
  (is (= @(duration "PT1H") @(minus (duration "PT3H1M") (hours 2) (minutes 1))))
  (is (= @(duration "PT1H") @(minus (hours 3) {:hours 2})))
  (is (= @(duration "PT1H") @(minus (duration "PT3H1M") {:hours 2} (minutes 1))))
  (is (= @(duration "PT1H") @(minus (duration "PT3H1M") {:hours 2} {:minutes 1})))
  (is (= @(duration "PT1H") @(minus (duration "PT3H1M") {:hours 2 :minutes 1}))))

(deftest test-multiplied-by
  (is (= @(period "P2Y4M6D") @(multiplied-by (period "P1Y2M3D") 2)))
  (is (= @(duration "PT3H6M9S") @(multiplied-by (duration "PT1H2M3S") 3))))
  
(deftest test-divided-by
  (is (= @(duration "PT1H2M3S") @(divided-by (duration "PT2H4M6S") 2)))
  (is (= @(duration "PT1H2M3S") @(divided-by (duration "PT3H6M9S") 3))))
